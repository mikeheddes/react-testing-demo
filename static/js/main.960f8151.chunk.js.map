{"version":3,"sources":["components/Other.jsx","components/Counter.jsx","components/ScreenWidth.jsx","components/ReminderItem.jsx","components/Reminder.jsx","App.js","serviceWorker.js","index.js"],"names":["textStyle","css","_templateObject","Wrapper","styled","div","_templateObject2","_ref","color","defaultProps","Label","span","_templateObject3","Button","button","_templateObject4","Line","_templateObject5","StyledButton","Counter_templateObject","StyledLine","Counter_templateObject2","Counter","state","value","handleDecreaseCount","_this","setState","handleIncreaseCount","this","react_default","a","createElement","onClick","Component","WrappedComponent","withScreenWidth","width","_Component","_class2","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleResize","window","innerWidth","throttle","inherits","createClass","key","addEventListener","removeEventListener","type","name","obj","running","requestAnimationFrame","dispatchEvent","CustomEvent","assign","ItemWrapper","ReminderItem_templateObject","StyledLabel","ReminderItem_templateObject2","ReminderItem_templateObject3","Rotate","ReminderItem_templateObject4","ToDoItem","handleRemove","_this$props","children","onRemove","ReminderItem_StyledButton","Input","Reminder_templateObject","ToDoWrapper","Reminder_templateObject2","Reminder","input","React","createRef","reminders","addReminder","label","current","indexOf","toConsumableArray","concat","removeReminder","filter","reminder","focusInput","focus","handleKeyPress","e","_this2","Fragment","as","placeholder","ref","onMouseEnter","onKeyPress","map","ReminderItem","Box","App_templateObject","Title","h2","App_templateObject2","App","components_Counter","components_ScreenWidth","components_Reminder","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.960f8151.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\nexport const textStyle = css`\n  color: white;\n  font-weight: 500;\n  font-size: 42px;\n  padding: 39px 50px;\n`;\n\nconst Wrapper = styled.div`\n  background-color: ${({ color }) => color};\n  position: relative;\n  box-shadow: 8px 8px rgba(0, 0, 0, 0.15);\n`;\n\nWrapper.defaultProps = {\n  color: \"#d8d8d8\"\n};\n\nexport { Wrapper };\n\nconst Label = styled.span`\n  display: block;\n  text-align: center;\n  ${textStyle};\n`;\n\nexport { Label };\n\nconst Button = styled.button`\n  ${textStyle};\n  appearance: none;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  user-select: none;\n  cursor: pointer;\n\n  &:active {\n    opacity: 0.5;\n  }\n`;\n\nexport { Button };\n\nconst Line = styled.div`\n  width: 5px;\n  background-color: white;\n  flex: 0 0 auto;\n`;\n\nexport { Line };\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Wrapper, Label, Button, Line } from \"./Other\";\n\nconst StyledButton = styled(Button)`\n  width: 50%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 0;\n\n  &:first-of-type {\n    text-align: left;\n    left: 0;\n    right: 50%;\n  }\n\n  &:last-of-type {\n    text-align: right;\n    left: 50%;\n    right: 0;\n  }\n`;\n\nconst StyledLine = styled(Line)`\n  position: absolute;\n  left: calc(50% - 5px / 2);\n  height: 28px;\n\n  &:first-of-type {\n    top: 0;\n  }\n\n  &:last-of-type {\n    bottom: 0;\n  }\n`;\n\nclass Counter extends Component {\n  state = { value: 0 };\n\n  handleDecreaseCount = () => {\n    this.setState({ value: this.state.value - 1 });\n  };\n\n  handleIncreaseCount = () => {\n    this.setState({ value: this.state.value + 1 });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Wrapper color=\"#eb4b4b\">\n        <StyledButton onClick={this.handleDecreaseCount}>-</StyledButton>\n        <Label>{value}</Label>\n        <StyledButton onClick={this.handleIncreaseCount}>+</StyledButton>\n        <StyledLine />\n        <StyledLine />\n      </Wrapper>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nimport { Wrapper, Label } from \"./Other\";\n\nfunction withScreenWidth(WrappedComponent) {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.throttle(\"resize\", \"optimizedResize\");\n      this.state = {\n        width: window.innerWidth\n      };\n    }\n\n    componentDidMount() {\n      window.addEventListener(\"optimizedResize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener(\"optimizedResize\", this.handleResize);\n    }\n\n    throttle(type, name, obj) {\n      obj = obj || window;\n      var running = false;\n      var func = function() {\n        if (running) {\n          return;\n        }\n        running = true;\n        requestAnimationFrame(function() {\n          obj.dispatchEvent(new CustomEvent(name));\n          running = false;\n        });\n      };\n      obj.addEventListener(type, func);\n    }\n\n    handleResize = () => {\n      this.setState({\n        width: window.innerWidth\n      });\n    };\n\n    render() {\n      return <WrappedComponent width={this.state.width} {...this.props} />;\n    }\n  };\n}\n\nconst ScreenWidth = ({ width }) => (\n  <Wrapper color=\"#855FEB\">\n    <Label>{width} px</Label>\n  </Wrapper>\n);\n\nexport { ScreenWidth };\n\nexport default withScreenWidth(ScreenWidth);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Wrapper, Label, Button, Line } from \"./Other\";\n\nconst ItemWrapper = styled(Wrapper)`\n  margin: 30px 0;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst StyledLabel = styled(Label)`\n  padding: 20px 30px;\n  font-size: 34px;\n  flex: 1 1 auto;\n  text-align: left;\n`;\n\nconst StyledButton = styled(Button)`\n  padding: 20px 30px;\n  font-size: 34px;\n`;\n\nconst Rotate = styled.span`\n  transform: rotate(45deg);\n  transform-origin: center;\n  display: inline-block;\n`;\n\nclass ToDoItem extends Component {\n  handleRemove = () => {\n    const { children, onRemove } = this.props;\n    onRemove(children);\n  };\n\n  render() {\n    const { children } = this.props;\n    return (\n      <ItemWrapper color=\"#495265\">\n        <StyledLabel>{children}</StyledLabel>\n        <Line />\n        <StyledButton onClick={this.handleRemove}>\n          <Rotate>+</Rotate>\n        </StyledButton>\n      </ItemWrapper>\n    );\n  }\n}\n\nexport default ToDoItem;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Wrapper, Label, Button, Line } from \"./Other\";\nimport Item from \"./ReminderItem\";\n\nconst Input = styled(Label)`\n  text-align: left;\n  appearance: none;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  flex: 1 1 auto;\n  min-width: 0px;\n\n  &::placeholder {\n    color: white;\n    opacity: 0.7;\n  }\n`;\n\nconst ToDoWrapper = styled(Wrapper)`\n  display: flex;\n  flex-direction: row;\n`;\n\nclass Reminder extends Component {\n  input = React.createRef();\n\n  state = { reminders: [\"Buy an apple\"] };\n\n  addReminder = () => {\n    const label = this.input.current.value;\n    if (!label) return;\n    if (this.state.reminders.indexOf(label) !== -1) return;\n    this.setState({ reminders: [...this.state.reminders, label] }, () => {\n      this.input.current.value = \"\";\n    });\n  };\n\n  removeReminder = label => {\n    const reminders = this.state.reminders.filter(\n      reminder => reminder !== label\n    );\n    this.setState({ reminders });\n  };\n\n  focusInput = () => {\n    this.input.current.focus();\n  };\n\n  handleKeyPress = e => {\n    if(e.key === 'Enter'){\n      this.addReminder()\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <ToDoWrapper color=\"#3F79FC\">\n          <Input\n            as=\"input\"\n            type=\"text\"\n            placeholder=\"What to do...\"\n            ref={this.input}\n            onMouseEnter={this.focusInput}\n            onKeyPress={this.handleKeyPress}\n          />\n          <Line />\n          <Button onClick={this.addReminder}>+</Button>\n        </ToDoWrapper>\n\n        {this.state.reminders.map(reminder => (\n          <Item onRemove={this.removeReminder} key={reminder}>\n            {reminder}\n          </Item>\n        ))}\n      </>\n    );\n  }\n}\n\nexport default Reminder;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nimport Counter from \"./components/Counter\";\nimport ScreenWidth from \"./components/ScreenWidth\";\nimport Reminder from \"./components/Reminder\";\n\nconst Box = styled.div`\n  width: 100%;\n  max-width: 500px;\n  margin: 80px auto;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n  font-weight: 600;\n  font-size: 42px;\n  color: #222;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Box>\n          <Title>Counter</Title>\n          <Counter />\n        </Box>\n        <Box>\n          <Title>ScreenWidth</Title>\n          <ScreenWidth />\n        </Box>\n        <Box>\n          <Title>Reminder</Title>\n          <Reminder />\n        </Box>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}